// Copyright IBM Corp. 2016. All Rights Reserved.
// Node module: loopback-workspace
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

'use strict';

var loopback = require('loopback');
var boot = require('loopback-boot');
var loopbackSSL = require('loopback-ssl');

var app = module.exports = loopback();

var DataSource = require('../common/models/CreateDataSource');

app.set('httpMode', true);

boot(app, __dirname, function(err) {
  if (err) throw err;
  let configServicePromise = loadConfig(app);
  configServicePromise.then((response) => {
    processConfig(response, loopbackSSL);
  }).catch((rejected) => {
    console.info('ConfigService :: server :: rejected :: ', JSON.stringify(rejected));
  });
});

function loadConfig(app) {
  console.info('ConfigService :: ', 'loadConfig called');
  let url = getUrl();
  console.info('config url :: ', url);
  let configAuth = generateBasicAuth('jitendra', 'password');
  let configAccessToken = 'sdjkf2i3h289wkenmfk';

  /**
   * Begin: setting up datasource
   */
  let headers = {'auth': configAuth, 'token': configAccessToken};
  let dataSourceObj = new DataSource(url, headers).getDataSource();
  console.log('dataSourceObj', dataSourceObj);
  app.dataSource('configservice', JSON.stringify(dataSourceObj));
  /**
   * End: setting up datasource
   */

  let medicalbillingapi = app.models.medicalbillingapi;
  medicalbillingapi.attachTo(app.dataSources.configservice);
  let configServicePromise = medicalbillingapi.configservice();
  return configServicePromise;
}

function getUrl() {
  let url = 'http://localhost:3000/datasource.json';
  return url;
}

function processConfig(response, loopbackSSL, settings) {
  console.log('ConfigService :: process called', response);
  if (response) {
    let datasources = response.datasources;
    let models = app.models();
    for (let key in datasources) {
      if (datasources.hasOwnProperty(key)) {
        models.forEach(function(model) {
          if (key === model.modelName) {
            let ds = loopback.createDataSource(datasources[key]);
            model.modelBuilder.models.medicalbillingapi.attachTo(ds);
          }
        });
      }
    }
    delete response['datasources'];
    global.appConfig = response;
    console.info('config response ::', JSON.stringify(response));
    app.inst = loopbackSSL.startServer(app);
  }
}
function generateBasicAuth(username, password) {
  let auth = 'Basic ' +
    new Buffer(username + ':' + password).toString('base64');
  return auth;
}
